
use std::collections::{BTreeSet, BTreeMap, LinkedList};
use std::iter::FromIterator;
use types::{Pair, Value};

// Goal: Be able to parse https://github.com/edn-format/edn
// Also extensible to help parse http://docs.datomic.com/query.html

#[export]
nil -> Value = "nil" {
  Value::Nil
}

#[export]
boolean -> Value =
  "true" { Value::Boolean(true) } /
  "false" { Value::Boolean(false) }

digit = [0-9]
digit_initial = [1-9]
digits = (digit / digits)
sign = "-" / "+"

#[export]
integer -> Value = i:$( sign? (digit_initial digit* / digit) ) {
  Value::Integer(i.parse::<i32>().unwrap())
}

fraction = "." digits
exp = ("e" / "E") (sign? digits)

// #[export]
// float -> Value = f:$( integer fraction? exp? ) {
//   Value::Float(f.parse::<f64>().unwrap())
// }

special_char = quote / tab                                                      // TODO: \newline, \return, \space and \tab
quote = "\\\""
tab = "\\tab"
char = [^"] / special_char

#[export]
text -> Value = "\"" t:$(  char* ) "\"" {
  Value::Text(t.to_string())
}

symbol_char_initial = [a-z] / [A-Z] / [0-9] / [*!_?$%&=<>/]
symbol_char_subsequent = [a-z] / [A-Z] / [0-9] / [*!_?$%&=<>/]                  // TODO: Be more picky here

#[export]
symbol -> Value = s:$( symbol_char_initial symbol_char_subsequent* ) {
  Value::Symbol(s.to_string())
}

keyword_char_initial = ":"
keyword_char_subsequent = [a-z] / [A-Z] / [0-9] / "/"                           // TODO: More chars here?

#[export]
keyword -> Value = k:$( keyword_char_initial keyword_char_subsequent+ ) {
  Value::Keyword(k.to_string())
}

#[export]
list -> Value = "(" v:(whitespace? value)* ")" {
  Value::List(LinkedList::from_iter(v))
}

#[export]
vector -> Value = "[" v:(whitespace? value)* "]" {
  Value::Vector(v)
}

#[export]
set -> Value = "#{" v:(whitespace? value)* "}" {
  Value::Set(BTreeSet::from_iter(v))
}

pair -> (Value, Value) = k:(value) " " v:(value) ", "? {
  (k, v)
}

#[export]
map -> Value = "{" v:(pair)* "}" {
  Value::Map(BTreeMap::from_iter(v))
}

// TODO: Decide about float
#[export]
value -> Value
    = nil / boolean / integer / text / keyword / symbol / list / vector / map / set

whitespace = (" " / "\r" / "\n" / "\t")
